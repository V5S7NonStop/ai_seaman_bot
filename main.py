import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üö¢ –¢–∏–ø—ã —Å—É–¥–æ–≤"))
    keyboard.add(KeyboardButton("üí¨ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –º–æ—Ä—è–∫—É"))
    keyboard.add(KeyboardButton("üì¨ –°–æ–≤–µ—Ç –¥–Ω—è"))
    keyboard.add(KeyboardButton("üß† –ú–æ—Ä—Å–∫–æ–π —Ç–µ—Å—Ç"))
    return keyboard

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–æ—Ä—è–∫! üåä\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–æ–∫–∞—á–∞—Ç—å—Å—è –≤ –º–æ—Ä—Å–∫–æ–π —Ç–µ–º–µ!",
        reply_markup=get_main_menu()
    )

@dp.message_handler(lambda message: message.text == "üí¨ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –º–æ—Ä—è–∫—É")
async def send_motivation(message: types.Message):
    phrases = [
        "–ö–∞–∂–¥—ã–π –º–æ—Ä—è–∫ ‚Äî —Å–∞–º —Å–µ–±–µ –∫–∞–ø–∏—Ç–∞–Ω! ‚õµ",
        "–®—Ç–æ—Ä–º—ã –¥–µ–ª–∞—é—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ! üå™Ô∏è",
        "–ü–æ–∫–æ–π –Ω–∞–º —Ç–æ–ª—å–∫–æ —Å–Ω–∏—Ç—Å—è ‚Äî –≤ –º–æ—Ä–µ —Ç—ã –∂–∏–≤—ë—à—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É! ‚öì",
        "–î–µ—Ä–∂–∏ –∫—É—Ä—Å –∏ –Ω–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–π, –±—Ä–∞—Ç! üåç"
    ]
    await message.reply(random.choice(phrases))

@dp.message_handler(lambda message: message.text == "üì¨ –°–æ–≤–µ—Ç –¥–Ω—è")
async def send_tip(message: types.Message):
    tips = [
        "–ü–µ—Ä–µ–¥ –≤–∞—Ö—Ç–æ–π –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ.",
        "–°–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
        "–í—Å–µ–≥–¥–∞ —É–≤–∞–∂–∞–π —Å—Ç–∞—Ä—à–∏—Ö –ø–æ –∑–≤–∞–Ω–∏—é –∏ –ø–æ–º–æ–≥–∞–π –º–ª–∞–¥—à–∏–º.",
        "–î–µ—Ä–∂–∏ —Ñ–æ—Ä–º—É ‚Äî —Ç–µ–ª–æ –º–æ—Ä—è–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–µ–ø–∫–∏–º!"
    ]
    await message.reply(random.choice(tips))

@dp.message_handler(lambda message: message.text == "üö¢ –¢–∏–ø—ã —Å—É–¥–æ–≤")
async def ship_types(message: types.Message):
    await message.reply(
        "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Å—É–¥–æ–≤:\n\n"
        "üõ≥Ô∏è –ö—Ä—É–∏–∑–Ω—ã–π –ª–∞–π–Ω–µ—Ä ‚Äî –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤\n"
        "üö¢ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑ ‚Äî –¥–ª—è –≥—Ä—É–∑–æ–≤\n"
        "‚õ¥Ô∏è –ü–∞—Ä–æ–º ‚Äî –ø–µ—Ä–µ–≤–æ–∑–∏—Ç –ª—é–¥–µ–π –∏ –º–∞—à–∏–Ω—ã\n"
        "üõ•Ô∏è –Ø—Ö—Ç–∞ ‚Äî –¥–ª—è –æ—Ç–¥—ã—Ö–∞\n"
        "‚öì –¢–∞–Ω–∫–µ—Ä ‚Äî –¥–ª—è –Ω–µ—Ñ—Ç–∏ –∏ —Ç–æ–ø–ª–∏–≤–∞"
    )

@dp.message_handler(lambda message: message.text == "üß† –ú–æ—Ä—Å–∫–æ–π —Ç–µ—Å—Ç")
async def marine_quiz(message: types.Message):
    question = "–°–∫–æ–ª—å–∫–æ –≤–∞—Ö—Ç –≤ –º–æ—Ä—Å–∫–∏—Ö —Å—É—Ç–∫–∞—Ö?"
    options = ["2", "3", "4", "6"]
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for option in options:
        keyboard.add(KeyboardButton(option))
    await message.reply(question, reply_markup=keyboard)

@dp.message_handler(lambda message: message.text in ["2", "3", "4", "6"])
async def handle_answer(message: types.Message):
    if message.text == "4":
        await message.reply("‚úÖ –í–µ—Ä–Ω–æ! –í —Å—É—Ç–∫–∞—Ö 4 –≤–∞—Ö—Ç—ã –ø–æ 6 —á–∞—Å–æ–≤.")
    else:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî 4.")

if __name__ == "__main__":
    import random
    executor.start_polling(dp, skip_updates=True)